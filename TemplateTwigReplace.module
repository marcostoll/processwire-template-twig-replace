<?php

/**
 * Class definition of ProcessWire module TemplateTwigReplace
 *
 * See README.md for usage instructions.
 *
 * @author Marco Stoll <marco.stoll@neuwaerts.de>
 * @author Tabea David <td@kf-interactive.com>
 * @author Christian Raunitschka <git@raunitschka.de>
 * @version 1.3.0
 * @copyright Copyright (c) 2014, neuwaerts GmbH
 * @license MIT http://opensource.org/licenses/MIT
 * @filesource
 * @see https://github.com/marcostoll/processwire-template-twig-replace
 * @see http://www.neuwaerts.de
 * @see http://www.processwire.com
 */

/**
 * Class TemplateTwigReplace
 */
class TemplateTwigReplace extends WireData implements Module, ConfigurableModule {

    /**
     * @field array Default config values
     */
    protected static $defaults = array(
        'fuel'              => 'page, pages, config, session, user, input',
        'ignoredTemplates'  => array('email-administrator', 'email-autoresponder', 'form-builder'),
        'allowedTemplates'  => array(),
        'cacheEnable'       => false,
        'cacheDir'          => 'twig/',
        'cacheAutoReload'   => true,
        'autoEscape'        => false,
    );

    /**
     * @field Twig_Environment The Twig render engine
     */
    protected $twig = null;


    public function __construct()
    {
        parent::__construct();
        foreach (self::$defaults as $key => $value) {
            $this->set($key, $value);
        }
    }

    /**
     * Retrieves module meta data
     *
     * Implementation of the Module interface
     *
     * @return array
     * @see http://processwire.com/apigen/class-Module.html
     */
    public static function getModuleInfo() {
        return array(
            // The module'ss title, typically a little more descriptive than the class name
            'title' => 'Template Twig Replace',

            // version: major, minor, revision
            'version' => '1.2.2',

            // summary is brief description of what this module is
            'summary' => 'Use Twig template engine instead of plain-php templates',

            // Optional URL to more information about the module
            'href' => 'https://github.com/marcostoll/processwire-template-twig-replace',

            // singular=true: indicates that only one instance of the module is allowed.
            // This is usually what you want for modules that attach hooks.
            'singular' => true,

            // autoload=true: indicates the module should be started with ProcessWire.
            // This is necessary for any modules that attach runtime hooks, otherwise those
            // hooks won't get attached unless some other code calls the module on it's own.
            // Note that autoload modules are almost always also 'singular' (seen above).
            'autoload' => true,

            // ProcessWire 2.5.5 for InputfieldWrapper->add(array()) feature
            'requires' => array('PHP>=5.4','ProcessWire>=2.5.5'),
        );
    }

    /**
     * Retrieves the list of config input fields
     *
     * Implementation of the ConfigurableModule interface
     *
     * @param array $data The config data
     * @return InputfieldWrapper
     * @see http://processwire.com/apigen/class-ConfigurableModule.html
     */
    public static function getModuleConfigInputfields(array $data) {
        $fields = new InputfieldWrapper();
        $modules = wire('modules');

        // Default config values
        $data = array_merge(self::$defaults, $data);

        $fields->add(array(

            // Fuel
            array(
                'type'        => 'InputfieldText',
                'name'        => 'fuel',
                'label'       => 'Auto-import fuel',
                'description' => implode(PHP_EOL, array(
                    'List ProcessWire fuel keys to automatically import as Twig variables',
                    'Use comma (,) or semicolon (,) as separator - with or without spaces',
                    'See http://processwire.com/api/variables/ for possible keys',
                )),
                'size'        => 45,
                'value'       => $data['fuel'],
            ),

            // Ignored templates
            array(
                'type'        => 'InputfieldAsmSelect',
                'name'        => 'ignoredTemplates',
                'label'       => 'Don’t use Twig for these templates',
                'description' => 'Templates that shouldn’t be rendered with twig',
                'size'        => 45,
                'options'     => self::getSelectTemplates(),
                'value'       => $data['ignoredTemplates'],
            ),

            // Allowed Templates
            array(
                'type'        => 'InputfieldAsmSelect',
                'name'        => 'allowedTemplates',
                'label'       => 'Allowed Templates',
                'description' => 'If not empty, only these templates will be used to be rendered with twig',
                'options'     => self::getSelectTemplates(),
                'value'       => $data['allowedTemplates'],
            ),

            // Enable Twig Cache
            array(
                'type'        => 'InputfieldCheckbox',
                'name'        => "cacheEnable",
                'label'       => "Enable Twig Cache",
                'description' => implode(PHP_EOL, array(
                    'Enable Twig cache in production mode only',
                    'Caches compiled templates, not page rendering output.',
                )),
                'value'       => 1,
                'checked'     => empty($data['cacheEnable']) ? '' : 'checked',
            ),

            // Twig Cache Directory
            array(
                'type'        => 'InputfieldText',
                'name'        => 'cacheDir',
                'label'       => 'Twig Cache Directory',
                'description' => 'Directory name for Twig cache (relative to wire("config")->paths->cache)',
                'size'        => 30,
                'value'       => $data['cacheDir'],
            ),

            // Auto Reload Twig Cache
            array(
                'type'        => 'InputfieldCheckbox',
                'name'        => 'cacheAutoReload',
                'label'       => 'Auto Reload Twig Cache',
                'description' => 'Reload Twig cache on template modification',
                'value'       => 1,
                'checked'     => empty($data['cacheAutoReload']) ? '' : 'checked',
            ),

            // Auto Escape Twig variables
            array(
                'type'        => 'InputfieldSelect',
                'name'        => 'autoEscape',
                'label'       => 'Auto Escape Twig variables',
                'description' => 'Automatic escape strategy for output variable content in Twig templates',
                'options'     => array('' => '<none>', 'html' => 'html', 'html_attr' => 'html_attr'),
                'value'       => $data['autoEscape'],
            ),
        ));

        return $fields;
    }

    protected static function getSelectTemplates() {
        $tpls = array();
        foreach (wire('templates') as $t) {
            if(!($t->flags & Template::flagSystem)) {
                $tpls[$t->name] = $t->name;
            }
        }
        return $tpls;
    }

    /**
     * Initialize the module
     *
     * Implementation of the Module interface
     *
     * ProcessWire calls this when the module is loaded. For 'autoload' modules, this will be called
     * when ProcessWire's API is ready. As a result, this is a good place to attach hooks.
     *
     * @see http://processwire.com/apigen/class-Module.html
     */
    public function init() {

        // replace default page rendering by hooked method
        $this->addHookBefore('PageRender::renderPage', $this, 'renderPageWithTwig');

        // replace default chunk rendering by hooked method
        $this->addHookBefore('nw\ChunkRenderer::render', $this, 'renderChunkWithTwig');
        // Make this compatible with PW3, when this bug is still present:
        // https://github.com/processwire/processwire-issues/issues/109
        $this->addHookBefore('ChunkRenderer::render', $this, 'renderChunkWithTwig');

    }

    /**
     * Hook callback for PageRender::renderPage
     *
     * Replaces default page rendering entirely.
     *
     * @param HookEvent $event The hook event
     * @throws WirePermissionException Page is not currently viewable.
     */
    public function renderPageWithTwig(HookEvent $event) {
        $parentEvent = $event->arguments(0); // grab event provided to PageRender::renderPage

        $page = $parentEvent->object;
        $config = $this->config;

        // don't mess with admin templates
        if($page->template == 'admin') return;

        if (count($this->allowedTemplates)) {
            // If ignored templates are set, only take them in account
            if (!in_array($page->template, $this->allowedTemplates)) return;
        } else {
            // If not, all templates but the ignored ones are allowed
            if (in_array($page->template, $this->ignoredTemplates)) return;
        }

        // double check page's status
        // taken from PageRender::__render()
        if ($page->status >= Page::statusUnpublished && !$page->viewable()) {
            throw new WirePermissionException('Page \'' . $page->url . '\' is not currently viewable.');
        }

        // forced replacing of default page rendering behaviour
        $event->replace = true;

        // look for cached data
        // taken from PageRender::__render()
        $options = count($parentEvent->arguments) ? $parentEvent->arguments[0] : array();
        $defaultOptions = array(
            'prependFile' => $page->template->noPrependTemplateFile ? null : $config->prependTemplateFile,
            'prependFiles' => $page->template->prependFile ? array($page->template->prependFile) : array(),
            'appendFile' => $page->template->noAppendTemplateFile ? null : $config->appendTemplateFile,
            'appendFiles' => $page->template->appendFile ? array($page->template->appendFile) : array(),
            'forceBuildCache' => false,
        );
        $options = array_merge($defaultOptions, $options);

        $cacheAllowed = $this->modules->get('PageRender')->isCacheAllowed($page);
        $cacheFile = null;

        if ($cacheAllowed) {
            $cacheFile = $this->modules->get('PageRender')->getCacheFile($page);
            if(!$options['forceBuildCache'] && ($data = $cacheFile->get()) !== false) {
                $parentEvent->return = $data;
                return;
            }
        }

        // allow page fields to be accessed directly in Twig
        // e.g. {{ page.myfield }} instead of {{ page.get('myfield') }}
        Page::$issetHas = true;

        $files = $this->getPrependAppendFiles($page, $options, $config);
        $output = $this->combineOutput($files, $page);

        // cache combinedOutput if possible
        // taken from PageRender::__render()
        if (!empty($output) && $cacheAllowed && !is_null($cacheFile)) $cacheFile->save($output);

        // manually set return of original event
        $parentEvent->return = $output;
    }

    /**
     * Hook callback for ChunkController::render
     *
     * Kicks in if module Template Data Providers is installed.
     * Replaces default chunk rendering entirely.
     *
     * @param HookEvent $event The hook event
     * @see https://github.com/marcostoll/processwire-template-data-providers
     */
    public function renderChunkWithTwig(HookEvent $event) {
        $chunkController = $event->arguments(0);

      // forced replacing of default page rendering behaviour
        $event->replace = true;

      // render template
        $twigVars = $this->collectVariables($chunkController);
        $output = $this->getTwig()->render($chunkController->getChunk(), $twigVars);

      // manually set return of original event
        $event->return = $output;
    }

    /**
     * Gather template variables from wire fuel and given $dataProvider
     *
     * Module config setting 'fuel' defines, which part of the wire fuel will be imported.
     *
     * @param WireData $dataProvider
     * @return array
     */
    protected function collectVariables(WireData $dataProvider) {
        $variables = array();
        $fuel = preg_split('/\s*[,;]\s*/', $this->fuel, - 1, PREG_SPLIT_NO_EMPTY);
        foreach ($fuel as $key) {
            $variables[$key] = wire($key);
        }

        $variables = array_merge($variables, $dataProvider->getArray());

        return $variables;
    }

    /**
     * Creates the twig render engine if necessary
     *
     * @return Twig_Environment
     */
    public function getTwig() {
        if (!is_null($this->twig)) return $this->twig;

        $cache = $this->cacheEnable ? $this->config->paths->cache . $this->cacheDir : false;
        $loader = new Twig_Loader_Filesystem($this->config->paths->templates);
        $options = array(
            'cache'         => $cache,
            'auto_reload'   => (boolean) $this->cacheAutoReload,
            'autoescape'    => $this->autoEscape,
            'debug'         => $this->config->debug
        );

        $this->twig = new Twig_Environment($loader, $options);
        $this->twig->addExtension(new Twig_Extension_Debug());

        return $this->twig;
    }

    /**
     * Adds prepend and append files if set
     *
     * @param Page $page
     * @param array $options
     * @param Config $config
     * @return array
     */
    private function getPrependAppendFiles($page, $options, $config) {
        // core output first to get prepend and append files working
        $output = $page->output(true);

        if ($output) {

            // global prepend/append include files apply only to user-defined templates, not system templates
            if(!($page->template->flags & Template::flagSystem)) {

                foreach(array('prependFile' => 'prependFiles', 'appendFile' => 'appendFiles') as $singular => $plural) {
                    if ($options[$singular]) array_unshift($options[$plural], $options[$singular]);

                    foreach($options[$plural] as $file) {
                        if (!ctype_alnum(str_replace(array(".", "-", "_", "/"), "", $file))) continue;
                        if (strpos($file, '..') !== false || strpos($file, '/.') !== false) continue;
                        $file = $config->paths->templates . trim($file, '/');
                        if (!is_file($file)) continue;
                        if ($plural == 'prependFiles') $output->setPrependFilename($file);
                        else $output->setAppendFilename($file);
                    }
                }
            }

            // pass along the $options as a local variable to the template so that one can provide their
            // own additional variables in it if they want to
            $output->set('options', $options);
        }

        $prepend = array();
        if (count($output->prependFilename) > 0) {
            foreach ($output->prependFilename as $file) {
                $prepend[] = new TemplateFile($file);
            }
        }

        $append = array();
        if (count($output->appendFilename) > 0) {
            foreach ($output->appendFilename as $file) {
                $append[] = new TemplateFile($file);
            }
        }

        return array('prepend' => $prepend, 'append' => $append);
    }

    /**
     * combine output
     *
     * @param array $files
     * @param Page $page
     */
    private function combineOutput($files, $page) {
        $twigVars = $this->collectVariables($page->output);

        $output = '';
        foreach ($files['prepend'] as $file) {
            $output .= $file->render();
        }

        $templateName =
            $page->template->altFilename
            ? $page->template->altFilename
            : $page->template->name;

        $output .= $this->getTwig()->render($templateName . '.' . $this->config->templateExtension, $twigVars);

        foreach ($files['append'] as $file) {
            $output .= $file->render();
        }

        return $output;
    }

}
